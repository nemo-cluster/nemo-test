#!/usr/bin/env groovy

def cluster = [cpus: "20",
               mem: "120g",
               prefix: "/home/jenkins/easybuild-files",
               modules_prefix: "/opt/modules",
               software_prefix: "/opt/software",
               easybuild_path: "/opt/easybuild/modules/all",
               deploy_path: "/opt/nemobuild"]

def running_opts = ""

def vars = [:]

pipeline {
    agent { label 'mg2'}
    stages {
        stage('GetVars') {
            steps {
                script {
                    gitVars = checkout scm
                    vars.branch = gitVars.GIT_BRANCH.trim()
                    vars.workingDir = sh(returnStdout: true,
                        script: 'echo $PWD').trim()
                    if (vars.branch ==~ /.*origin.*/ ) {
                        vars.triggeredBy = currentBuild.getBuildCauses()[0].shortDescription.split(' ')[2]
                    } else {
                        vars.triggeredBy = "False"
                    }
                    vars.commitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=format:%s').trim()
                    vars.differences = sh(returnStdout: true, script: 'git diff origin/master...HEAD --name-only --oneline --no-merges --diff-filter=ACMRTUXB |grep ^easybuild\\/easyconfigs\\/.*\\.eb\\\$ | wc -l').trim() as Integer
                    vars.regression = "False"
                    echo "$vars"
                }
            }
        }
        stage('TestBuild') {
            when {
                expression { 
                    vars.differences > 0 && 
                    vars.branch != "master" && 
                    vars.branch != "develop" 
                }
            }
            steps {
                script {
                    def softwareList = "${vars.workingDir}/${build_id}"
                    running_opts += " --prefix=${vars.workingDir}/software"
                    running_opts += " --list=${softwareList}"
                    running_opts += " --use=${cluster.modules_prefix}/all"
                    running_opts += " --eb-path=${cluster.easybuild_path}"
                    running_opts += " --hide-deps"
                    sh("""git diff origin/master...HEAD --name-only --oneline --no-merges --diff-filter=ACMRTUXB |grep ^easybuild\\/easyconfigs\\/.*\\.eb\\\$ |awk '{print \"basename \"\$0}' > ${softwareList}""")
                    command = "srun --partition=1d --cpus-per-task=$cluster.cpus --mem=$cluster.mem $vars.workingDir/jenkins/production.sh $running_opts"
                    sh("""$command""")
                }
            }    
        }
        stage('Prepare Build') {
            when {
                expression {
                    vars.branch == "master" ||
                    vars.branch == "develop" ||
                    vars.branch == "origin/master" ||
                    vars.branch == "origin/develop"
                }
            }
            steps {
                script {
                    running_opts += " --list=Template"
                    running_opts += " --hide-deps"
                    running_opts += " --eb-path=${cluster.easybuild_path}"
                    // Case Regress
                    if (vars.triggeredBy == "timer" || vars.commitMessage ==~ /.*REGRESSION.*/ ) {
                        echo "Detecting regression"
                        running_opts += " --prefix=${vars.workingDir}/software"
                        vars.regression = "True"
                    } else {
                        vars.regression = "False"
                        if (vars.branch == "master") { // Case master
                            running_opts += " --prefix=${cluster.prefix}"
                            running_opts += " --soft-prefix=${cluster.software_prefix}"
                            running_opts += " --modules-prefix=${cluster.modules_prefix}"
                            vars.deploy_path = cluster.deploy_path
                        } else if( vars.branch == "develop") {
                            //Do rsync and put new prefixes...
                            running_opts += " --prefix=${HOME}/develop/cluster-prefix"
                            running_opts += " --soft-prefix=${HOME}/develop/software-prefix"
                            running_opts += " --modules-prefix=${HOME}/develop/modules-prefix"
                            vars.deploy_path = "${HOME}/develop/nemobuild"
                            sh("""
                            mkdir -p ${HOME}/develop/cluster-prefix;
                            mkdir -p ${HOME}/develop/software-prefix;
                            mkdir -p ${HOME}/develop/modules-prefix;
                            mkdir -p ${HOME}/develop/nemobuild;
                            rsync -aHh --delete ${cluster.prefix}/ ${HOME}/develop/cluster-prefix;
                            rsync -aHh --delete ${cluster.software_prefix}/ ${HOME}/develop/software-prefix;
                            rsync -aHh --delete ${cluster.modules_prefix}/ ${HOME}/develop/modules-prefix;
                            rsync -aHh --delete ${cluster.deploy_path}/ ${HOME}/develop/nemobuild;
                            """)
                        }
                    }
                }
            }
        }
        stage('Build') {
            when {
                expression {
                    (vars.branch == "master" ||
                    vars.branch == "develop")
                }
                expression {
                    vars.regression == "False"
                }
            }
            steps {
                script {
                    command = "srun --partition=1d --cpus-per-task=$cluster.cpus --mem=$cluster.mem $vars.workingDir/jenkins/production.sh $running_opts"
                    sh("""$command""")
                    sh("""$vars.workingDir/jenkins/production.sh --deploy=$vars.deploy_path $running_opts""")
                }
            }
        }
        stage('Regression') {
            when {
                expression {
                    vars.regression == "True"
                }
            }
            steps {
                script {
                    command = "srun --partition=1d --cpus-per-task=$cluster.cpus --mem=$cluster.mem $vars.workingDir/jenkins/production.sh $running_opts"
                    sh("""$command""")
                }
            }
        }
    }
}
